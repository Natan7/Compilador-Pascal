
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisadores;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import util.SemanticManager;
import util.Objeto;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\363\000\002\002\004\000\002\002\005\000\002\003" +
    "\006\000\002\174\005\000\002\174\002\000\002\004\004" +
    "\000\002\007\007\000\002\011\006\000\002\232\005\000" +
    "\002\232\002\000\002\213\003\000\002\213\002\000\002" +
    "\012\006\000\002\246\005\000\002\246\002\000\002\214" +
    "\003\000\002\214\002\000\002\020\005\000\002\013\006" +
    "\000\002\245\005\000\002\245\002\000\002\215\003\000" +
    "\002\215\002\000\002\022\005\000\002\014\006\000\002" +
    "\247\002\000\002\014\010\000\002\244\005\000\002\244" +
    "\002\000\002\216\003\000\002\216\002\000\002\023\005" +
    "\000\002\016\011\000\002\017\003\000\002\017\002\000" +
    "\002\025\003\000\002\025\003\000\002\010\005\000\002" +
    "\204\003\000\002\031\003\000\002\027\005\000\002\240" +
    "\005\000\002\240\002\000\002\212\003\000\002\212\002" +
    "\000\002\041\003\000\002\041\003\000\002\042\005\000" +
    "\002\043\006\000\002\045\003\000\002\237\005\000\002" +
    "\237\002\000\002\046\003\000\002\046\003\000\002\047" +
    "\006\000\002\050\006\000\002\051\004\000\002\051\002" +
    "\000\002\052\003\000\002\005\004\000\002\236\005\000" +
    "\002\236\002\000\002\053\003\000\002\053\003\000\002" +
    "\211\004\000\002\211\002\000\002\054\003\000\002\054" +
    "\002\000\002\210\003\000\002\102\005\000\002\222\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\072\005\000\002\073\003\000\002" +
    "\076\006\000\002\077\003\000\002\101\003\000\002\227" +
    "\005\000\002\227\002\000\002\075\007\000\002\230\005" +
    "\000\002\230\002\000\002\071\006\000\002\231\005\000" +
    "\002\231\002\000\002\070\003\000\002\070\003\000\002" +
    "\067\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\220\005\000\002\217\003\000\002\217\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\207\004\000\002\207\002\000\002" +
    "\100\005\000\002\243\005\000\002\243\002\000\002\165" +
    "\004\000\002\242\005\000\002\242\002\000\002\166\003" +
    "\000\002\166\003\000\002\166\003\000\002\166\003\000" +
    "\002\166\003\000\002\166\003\000\002\166\003\000\002" +
    "\166\005\000\002\250\002\000\002\166\005\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\144\003" +
    "\000\002\144\003\000\002\145\003\000\002\145\003\000" +
    "\002\143\005\000\002\111\005\000\002\030\004\000\002" +
    "\030\002\000\002\206\003\000\002\206\002\000\002\172" +
    "\004\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\112\003\000\002\112\003\000" +
    "\002\116\005\000\002\115\005\000\002\140\003\000\002" +
    "\141\003\000\002\113\004\000\002\201\003\000\002\201" +
    "\002\000\002\117\003\000\002\117\003\000\002\117\003" +
    "\000\002\241\005\000\002\241\002\000\002\123\003\000" +
    "\002\124\003\000\002\120\005\000\002\131\004\000\002" +
    "\131\002\000\002\132\004\000\002\132\003\000\002\202" +
    "\003\000\002\202\002\000\002\203\004\000\002\203\002" +
    "\000\002\127\004\000\002\233\005\000\002\233\002\000" +
    "\002\142\005\000\002\130\010\000\002\234\005\000\002" +
    "\234\002\000\002\133\003\000\002\200\003\000\002\200" +
    "\002\000\002\135\007\000\002\226\005\000\002\226\002" +
    "\000\002\136\004\000\002\177\005\000\002\177\002\000" +
    "\002\176\004\000\002\176\002\000\002\134\003\000\002" +
    "\171\003\000\002\150\003\000\002\251\002\000\002\146" +
    "\005\000\002\147\003\000\002\151\003\000\002\066\003" +
    "\000\002\040\003\000\002\036\003\000\002\024\003\000" +
    "\002\035\003\000\002\037\003\000\002\006\004\000\002" +
    "\065\004\000\002\223\005\000\002\223\002\000\002\224" +
    "\005\000\002\224\002\000\002\225\005\000\002\225\002" +
    "\000\002\152\003\000\002\152\003\000\002\062\003\000" +
    "\002\062\003\000\002\153\003\000\002\154\006\000\002" +
    "\154\004\000\002\173\004\000\002\175\003\000\002\175" +
    "\002\000\002\157\003\000\002\160\003\000\002\160\002" +
    "\000\002\156\004\000\002\015\003\000\002\021\004\000" +
    "\002\021\003\000\002\221\003\000\002\221\003\000\002" +
    "\106\003\000\002\106\003\000\002\106\003\000\002\106" +
    "\003\000\002\106\003\000\002\106\003\000\002\106\003" +
    "\000\002\107\003\000\002\107\003\000\002\110\003\000" +
    "\002\110\003\000\002\110\003\000\002\110\003\000\002" +
    "\161\003\000\002\170\003\000\002\163\003\000\002\163" +
    "\003\000\002\164\003\000\002\164\002\000\002\063\003" +
    "\000\002\064\003\000\002\162\003\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\004\011\006\001\002\000\004\002\u0116\001" +
    "\002\000\014\012\024\013\ufff6\014\ufff6\015\ufff6\017\ufff6" +
    "\001\002\000\004\100\010\001\002\000\006\062\ufffd\071" +
    "\012\001\002\000\054\020\uff0f\022\uff0f\031\uff0f\036\uff0f" +
    "\043\uff0f\044\uff0f\054\uff0f\061\uff0f\062\uff0f\063\uff0f\064" +
    "\uff0f\065\uff0f\066\uff0f\067\uff0f\070\uff0f\071\uff0f\072\uff0f" +
    "\073\uff0f\074\uff0f\076\uff0f\100\uff0f\001\002\000\004\062" +
    "\022\001\002\000\004\100\010\001\002\000\012\044\uff3b" +
    "\061\uff3b\063\016\072\uff3b\001\002\000\004\072\015\001" +
    "\002\000\004\062\ufffe\001\002\000\004\100\010\001\002" +
    "\000\010\044\uff40\061\uff40\072\uff40\001\002\000\012\044" +
    "\uff3b\061\uff3b\063\016\072\uff3b\001\002\000\010\044\uff3c" +
    "\061\uff3c\072\uff3c\001\002\000\014\012\uffff\013\uffff\014" +
    "\uffff\015\uffff\017\uffff\001\002\000\012\013\242\014\ufff1" +
    "\015\ufff1\017\ufff1\001\002\000\010\064\107\065\101\077" +
    "\uff13\001\002\000\004\017\031\001\002\000\004\073\030" +
    "\001\002\000\012\013\ufff7\014\ufff7\015\ufff7\017\ufff7\001" +
    "\002\000\004\002\000\001\002\000\016\017\045\020\uffbe" +
    "\030\035\034\043\062\uffbe\100\010\001\002\000\004\073" +
    "\ufffc\001\002\000\006\020\uffb5\062\uffb5\001\002\000\014" +
    "\031\uff45\043\uff45\054\uff45\063\uff45\073\uff45\001\002\000" +
    "\030\006\uff13\007\224\010\225\035\uff13\056\uff13\064\107" +
    "\065\101\071\uff13\075\uff13\077\uff13\100\uff13\001\002\000" +
    "\006\020\uffc3\062\uffc3\001\002\000\006\020\uffba\062\uffba" +
    "\001\002\000\044\020\uff89\031\uff89\036\uff89\043\uff89\054" +
    "\uff89\061\uff89\062\uff89\063\uff89\064\uff89\065\uff89\066\uff89" +
    "\067\uff89\070\uff89\072\uff89\073\uff89\076\uff89\100\uff89\001" +
    "\002\000\044\020\uff85\031\uff85\036\uff85\043\uff85\054\uff85" +
    "\061\uff85\062\uff85\063\uff85\064\uff85\065\uff85\066\uff85\067" +
    "\uff85\070\uff85\072\uff85\073\uff85\076\uff85\100\uff85\001\002" +
    "\000\044\020\uff86\031\uff86\036\uff86\043\uff86\054\uff86\061" +
    "\uff86\062\uff86\063\uff86\064\uff86\065\uff86\066\uff86\067\uff86" +
    "\070\uff86\072\uff86\073\uff86\076\uff86\100\uff86\001\002\000" +
    "\004\100\010\001\002\000\044\020\uff88\031\uff88\036\uff88" +
    "\043\uff88\054\uff88\061\uff88\062\uff88\063\uff88\064\uff88\065" +
    "\uff88\066\uff88\067\uff88\070\uff88\072\uff88\073\uff88\076\uff88" +
    "\100\uff88\001\002\000\016\017\045\020\uffbe\030\035\034" +
    "\043\062\uffbe\100\010\001\002\000\044\020\uff87\031\uff87" +
    "\036\uff87\043\uff87\054\uff87\061\uff87\062\uff87\063\uff87\064" +
    "\uff87\065\uff87\066\uff87\067\uff87\070\uff87\072\uff87\073\uff87" +
    "\076\uff87\100\uff87\001\002\000\044\020\uff84\031\uff84\036" +
    "\uff84\043\uff84\054\uff84\061\uff84\062\uff84\063\uff84\064\uff84" +
    "\065\uff84\066\uff84\067\uff84\070\uff84\072\uff84\073\uff84\076" +
    "\uff84\100\uff84\001\002\000\004\020\211\001\002\000\004" +
    "\043\100\001\002\000\004\073\075\001\002\000\044\020" +
    "\uff8a\031\uff8a\036\uff8a\043\uff8a\054\uff8a\061\uff8a\062\uff8a" +
    "\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\072" +
    "\uff8a\073\uff8a\076\uff8a\100\uff8a\001\002\000\006\020\uffc2" +
    "\062\uffc2\001\002\000\006\020\uffb9\062\uffb9\001\002\000" +
    "\006\020\uffb8\062\uffb8\001\002\000\004\054\074\001\002" +
    "\000\006\020\uffbf\062\uffbf\001\002\000\004\054\uff4a\001" +
    "\002\000\010\043\uffbb\054\uff4b\073\uff48\001\002\000\006" +
    "\020\uffc4\062\067\001\002\000\006\020\uffbd\062\uffbd\001" +
    "\002\000\006\020\uffb7\062\uffb7\001\002\000\004\020\uffc6" +
    "\001\002\000\016\017\045\020\uffbe\030\035\034\043\062" +
    "\uffbe\100\010\001\002\000\006\020\uffc4\062\067\001\002" +
    "\000\004\020\uffc5\001\002\000\004\054\073\001\002\000" +
    "\044\020\uff49\031\uff49\036\uff49\043\uff49\054\uff49\061\uff49" +
    "\062\uff49\063\uff49\064\uff49\065\uff49\066\uff49\067\uff49\070" +
    "\uff49\072\uff49\073\uff49\076\uff49\100\uff49\001\002\000\044" +
    "\020\uff7d\031\uff7d\036\uff7d\043\uff7d\054\uff7d\061\uff7d\062" +
    "\uff7d\063\uff7d\064\uff7d\065\uff7d\066\uff7d\067\uff7d\070\uff7d" +
    "\072\uff7d\073\uff7d\076\uff7d\100\uff7d\001\002\000\004\100" +
    "\010\001\002\000\044\020\uff83\031\uff83\036\uff83\043\uff83" +
    "\054\uff83\061\uff83\062\uff83\063\uff83\064\uff83\065\uff83\066" +
    "\uff83\067\uff83\070\uff83\072\uff83\073\uff83\076\uff83\100\uff83" +
    "\001\002\000\044\020\uff45\031\uff45\036\uff45\043\uff45\054" +
    "\uff45\061\uff45\062\uff45\063\uff45\064\uff45\065\uff45\066\uff45" +
    "\067\uff45\070\uff45\072\uff45\073\uff45\076\uff45\100\uff45\001" +
    "\002\000\030\006\uff13\007\105\010\110\035\uff13\056\uff13" +
    "\064\107\065\101\071\uff13\075\uff13\077\uff13\100\uff13\001" +
    "\002\000\024\006\uff15\035\uff15\056\uff15\064\uff15\065\uff15" +
    "\071\uff15\075\uff15\077\uff15\100\uff15\001\002\000\024\006" +
    "\uff14\035\uff14\056\uff14\064\uff14\065\uff14\071\uff14\075\uff14" +
    "\077\uff14\100\uff14\001\002\000\022\020\uff9d\031\uff9d\061" +
    "\uff9d\062\uff9d\063\uff9d\072\uff9d\076\uff9d\100\uff9d\001\002" +
    "\000\006\004\203\005\205\001\002\000\024\004\uff35\005" +
    "\uff35\020\uff12\061\uff12\062\uff12\063\uff12\072\uff12\076\uff12" +
    "\100\uff12\001\002\000\022\020\uff9f\031\uff9f\061\uff9f\062" +
    "\uff9f\063\uff9f\072\uff9f\076\uff9f\100\uff9f\001\002\000\024" +
    "\006\uff16\035\uff16\056\uff16\064\uff16\065\uff16\071\uff16\075" +
    "\uff16\077\uff16\100\uff16\001\002\000\024\004\uff36\005\uff36" +
    "\020\uff11\061\uff11\062\uff11\063\uff11\072\uff11\076\uff11\100" +
    "\uff11\001\002\000\024\006\120\035\123\056\121\064\107" +
    "\065\101\071\130\075\124\077\uff13\100\010\001\002\000" +
    "\006\020\uffbc\062\uffbc\001\002\000\022\020\uffa0\031\uffa0" +
    "\061\uffa0\062\uffa0\063\uffa0\072\uffa0\076\uffa0\100\uffa0\001" +
    "\002\000\022\020\uff9e\031\uff9e\061\uff9e\062\uff9e\063\uff9e" +
    "\072\uff9e\076\uff9e\100\uff9e\001\002\000\036\020\uff92\031" +
    "\uff92\036\uff92\061\uff92\062\uff92\063\uff92\064\uff92\065\uff92" +
    "\066\uff92\067\uff92\070\uff92\072\uff92\076\uff92\100\uff92\001" +
    "\002\000\036\020\uff93\031\uff93\036\uff93\061\uff93\062\uff93" +
    "\063\uff93\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93\072" +
    "\uff93\076\uff93\100\uff93\001\002\000\042\020\uff45\031\uff45" +
    "\036\uff45\054\uff45\061\uff45\062\uff45\063\uff45\064\uff45\065" +
    "\uff45\066\uff45\067\uff45\070\uff45\072\uff45\073\uff45\076\uff45" +
    "\100\uff45\001\002\000\024\006\uff8c\035\uff8c\056\uff8c\064" +
    "\uff8c\065\uff8c\071\uff8c\075\uff8c\077\uff8c\100\uff8c\001\002" +
    "\000\040\020\uff10\031\uff10\036\uff10\061\uff10\062\uff10\063" +
    "\uff10\064\uff10\065\uff10\066\uff10\067\uff10\070\uff10\072\uff10" +
    "\074\uff10\076\uff10\100\uff10\001\002\000\004\077\143\001" +
    "\002\000\036\020\uff90\031\uff90\036\uff90\061\uff90\062\uff90" +
    "\063\uff90\064\uff90\065\uff90\066\uff90\067\uff90\070\uff90\072" +
    "\uff90\076\uff90\100\uff90\001\002\000\032\006\uff13\007\105" +
    "\010\110\035\uff13\056\uff13\064\107\065\101\071\uff13\075" +
    "\uff13\076\uff80\077\uff13\100\uff13\001\002\000\040\020\uff18" +
    "\031\uff18\036\uff18\061\uff18\062\uff18\063\uff18\064\uff18\065" +
    "\uff18\066\uff18\067\uff18\070\uff18\072\uff18\074\uff18\076\uff18" +
    "\100\uff18\001\002\000\036\020\uff8e\031\uff8e\036\uff8e\061" +
    "\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e" +
    "\070\uff8e\072\uff8e\076\uff8e\100\uff8e\001\002\000\036\020" +
    "\uff91\031\uff91\036\uff91\061\uff91\062\uff91\063\uff91\064\uff91" +
    "\065\uff91\066\uff91\067\uff91\070\uff91\072\uff91\076\uff91\100" +
    "\uff91\001\002\000\030\006\uff13\007\105\010\110\035\uff13" +
    "\056\uff13\064\107\065\101\071\uff13\075\uff13\077\uff13\100" +
    "\uff13\001\002\000\036\020\uff95\031\uff95\036\162\061\uff95" +
    "\062\uff95\063\uff95\064\uff95\065\uff95\066\164\067\163\070" +
    "\160\072\uff95\076\uff95\100\uff95\001\002\000\026\020\uff98" +
    "\031\uff98\061\uff98\062\uff98\063\uff98\064\152\065\153\072" +
    "\uff98\076\uff98\100\uff98\001\002\000\040\020\uff38\031\uff38" +
    "\036\uff38\061\uff38\062\uff38\063\uff38\064\uff38\065\uff38\066" +
    "\uff38\067\uff38\070\uff38\072\uff38\074\uff38\076\uff38\100\uff38" +
    "\001\002\000\040\020\uff37\031\uff37\036\uff37\061\uff37\062" +
    "\uff37\063\uff37\064\uff37\065\uff37\066\uff37\067\uff37\070\uff37" +
    "\072\uff37\074\uff37\076\uff37\100\uff37\001\002\000\036\020" +
    "\uff8f\031\uff8f\036\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f" +
    "\065\uff8f\066\uff8f\067\uff8f\070\uff8f\072\uff8f\076\uff8f\100" +
    "\uff8f\001\002\000\044\020\uff34\031\uff34\036\uff34\057\140" +
    "\061\uff34\062\uff34\063\uff34\064\uff34\065\uff34\066\uff34\067" +
    "\uff34\070\uff34\072\uff34\073\142\074\uff34\076\uff34\100\uff34" +
    "\001\002\000\042\020\uff94\031\uff94\036\uff94\054\uff4b\061" +
    "\uff94\062\uff94\063\uff94\064\uff94\065\uff94\066\uff94\067\uff94" +
    "\070\uff94\072\uff94\073\uff48\076\uff94\100\uff94\001\002\000" +
    "\010\064\107\065\101\077\uff13\001\002\000\040\020\uff32" +
    "\031\uff32\036\uff32\061\uff32\062\uff32\063\uff32\064\uff32\065" +
    "\uff32\066\uff32\067\uff32\070\uff32\072\uff32\074\uff32\076\uff32" +
    "\100\uff32\001\002\000\044\020\uff2c\031\uff2c\036\uff2c\057" +
    "\uff2c\061\uff2c\062\uff2c\063\uff2c\064\uff2c\065\uff2c\066\uff2c" +
    "\067\uff2c\070\uff2c\072\uff2c\074\uff2c\076\uff2c\077\143\100" +
    "\uff2c\001\002\000\044\020\uff2e\031\uff2e\036\uff2e\057\uff2e" +
    "\061\uff2e\062\uff2e\063\uff2e\064\uff2e\065\uff2e\066\uff2e\067" +
    "\uff2e\070\uff2e\072\uff2e\073\uff2e\074\uff2e\076\uff2e\100\uff2e" +
    "\001\002\000\042\020\uff2f\031\uff2f\036\uff2f\057\140\061" +
    "\uff2f\062\uff2f\063\uff2f\064\uff2f\065\uff2f\066\uff2f\067\uff2f" +
    "\070\uff2f\072\uff2f\074\uff2f\076\uff2f\100\uff2f\001\002\000" +
    "\042\020\uff2d\031\uff2d\036\uff2d\057\uff2d\061\uff2d\062\uff2d" +
    "\063\uff2d\064\uff2d\065\uff2d\066\uff2d\067\uff2d\070\uff2d\072" +
    "\uff2d\074\uff2d\076\uff2d\100\uff2d\001\002\000\040\020\uff33" +
    "\031\uff33\036\uff33\061\uff33\062\uff33\063\uff33\064\uff33\065" +
    "\uff33\066\uff33\067\uff33\070\uff33\072\uff33\074\uff33\076\uff33" +
    "\100\uff33\001\002\000\040\020\uff30\031\uff30\036\uff30\061" +
    "\uff30\062\uff30\063\uff30\064\uff30\065\uff30\066\uff30\067\uff30" +
    "\070\uff30\072\uff30\074\uff30\076\uff30\100\uff30\001\002\000" +
    "\040\020\uff31\031\uff31\036\uff31\061\uff31\062\uff31\063\uff31" +
    "\064\uff31\065\uff31\066\uff31\067\uff31\070\uff31\072\uff31\074" +
    "\uff31\076\uff31\100\uff31\001\002\000\024\006\120\035\123" +
    "\056\121\064\107\065\101\071\130\075\124\077\uff13\100" +
    "\010\001\002\000\024\006\uff1e\035\uff1e\056\uff1e\064\uff1e" +
    "\065\uff1e\071\uff1e\075\uff1e\077\uff1e\100\uff1e\001\002\000" +
    "\024\006\uff1d\035\uff1d\056\uff1d\064\uff1d\065\uff1d\071\uff1d" +
    "\075\uff1d\077\uff1d\100\uff1d\001\002\000\022\020\uff9a\031" +
    "\uff9a\061\uff9a\062\uff9a\063\uff9a\072\uff9a\076\uff9a\100\uff9a" +
    "\001\002\000\026\020\uff98\031\uff98\061\uff98\062\uff98\063" +
    "\uff98\064\152\065\153\072\uff98\076\uff98\100\uff98\001\002" +
    "\000\022\020\uff99\031\uff99\061\uff99\062\uff99\063\uff99\072" +
    "\uff99\076\uff99\100\uff99\001\002\000\026\020\uff97\031\uff97" +
    "\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\072\uff97\076" +
    "\uff97\100\uff97\001\002\000\024\006\uff19\035\uff19\056\uff19" +
    "\064\uff19\065\uff19\071\uff19\075\uff19\077\uff19\100\uff19\001" +
    "\002\000\024\006\120\035\123\056\121\064\107\065\101" +
    "\071\130\075\124\077\uff13\100\010\001\002\000\024\006" +
    "\uff1a\035\uff1a\056\uff1a\064\uff1a\065\uff1a\071\uff1a\075\uff1a" +
    "\077\uff1a\100\uff1a\001\002\000\024\006\uff1b\035\uff1b\056" +
    "\uff1b\064\uff1b\065\uff1b\071\uff1b\075\uff1b\077\uff1b\100\uff1b" +
    "\001\002\000\024\006\uff1c\035\uff1c\056\uff1c\064\uff1c\065" +
    "\uff1c\071\uff1c\075\uff1c\077\uff1c\100\uff1c\001\002\000\036" +
    "\020\uff95\031\uff95\036\162\061\uff95\062\uff95\063\uff95\064" +
    "\uff95\065\uff95\066\164\067\163\070\160\072\uff95\076\uff95" +
    "\100\uff95\001\002\000\026\020\uff96\031\uff96\061\uff96\062" +
    "\uff96\063\uff96\064\uff96\065\uff96\072\uff96\076\uff96\100\uff96" +
    "\001\002\000\004\072\170\001\002\000\036\020\uff8d\031" +
    "\uff8d\036\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d\065\uff8d" +
    "\066\uff8d\067\uff8d\070\uff8d\072\uff8d\076\uff8d\100\uff8d\001" +
    "\002\000\004\076\177\001\002\000\006\063\173\076\uff39" +
    "\001\002\000\030\006\uff13\007\105\010\110\035\uff13\056" +
    "\uff13\064\107\065\101\071\uff13\075\uff13\077\uff13\100\uff13" +
    "\001\002\000\004\076\uff81\001\002\000\006\063\173\076" +
    "\uff39\001\002\000\004\076\uff3a\001\002\000\036\020\uff82" +
    "\031\uff82\036\uff82\061\uff82\062\uff82\063\uff82\064\uff82\065" +
    "\uff82\066\uff82\067\uff82\070\uff82\072\uff82\076\uff82\100\uff82" +
    "\001\002\000\044\020\uff2b\031\uff2b\036\uff2b\057\uff2b\061" +
    "\uff2b\062\uff2b\063\uff2b\064\uff2b\065\uff2b\066\uff2b\067\uff2b" +
    "\070\uff2b\072\uff2b\073\uff2b\074\uff2b\076\uff2b\100\uff2b\001" +
    "\002\000\024\006\120\035\123\056\121\064\107\065\101" +
    "\071\130\075\124\077\uff13\100\010\001\002\000\036\020" +
    "\uff8b\031\uff8b\036\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b" +
    "\065\uff8b\066\uff8b\067\uff8b\070\uff8b\072\uff8b\076\uff8b\100" +
    "\uff8b\001\002\000\006\007\uffa2\010\uffa2\001\002\000\006" +
    "\007\207\010\210\001\002\000\006\007\uffa1\010\uffa1\001" +
    "\002\000\022\020\uffa3\031\uffa3\061\uffa3\062\uffa3\063\uffa3" +
    "\072\uffa3\076\uffa3\100\uffa3\001\002\000\022\020\uff35\031" +
    "\uff35\061\uff35\062\uff35\063\uff35\072\uff35\076\uff35\100\uff35" +
    "\001\002\000\022\020\uff36\031\uff36\061\uff36\062\uff36\063" +
    "\uff36\072\uff36\076\uff36\100\uff36\001\002\000\004\073\uffdc" +
    "\001\002\000\004\020\213\001\002\000\006\020\uffb6\062" +
    "\uffb6\001\002\000\010\031\uffad\063\216\073\075\001\002" +
    "\000\012\031\uff48\054\uff4b\063\uff48\073\uff48\001\002\000" +
    "\004\100\010\001\002\000\004\031\220\001\002\000\016" +
    "\017\045\020\uffbe\030\035\034\043\062\uffbe\100\010\001" +
    "\002\000\006\020\uffaf\062\uffaf\001\002\000\010\031\uffad" +
    "\063\216\073\075\001\002\000\004\031\uffae\001\002\000" +
    "\010\004\uff35\005\uff35\031\uffa6\001\002\000\010\004\uff36" +
    "\005\uff36\031\uffa5\001\002\000\004\031\230\001\002\000" +
    "\004\031\uffa4\001\002\000\016\017\045\020\uffbe\030\035" +
    "\034\043\062\uffbe\100\010\001\002\000\006\020\uffb4\062" +
    "\uffb4\001\002\000\006\062\uff2a\063\uff2a\001\002\000\006" +
    "\062\ufff8\063\235\001\002\000\006\062\uff34\063\uff34\001" +
    "\002\000\010\064\107\065\101\077\uff13\001\002\000\004" +
    "\062\237\001\002\000\012\013\ufffa\014\ufffa\015\ufffa\017" +
    "\ufffa\001\002\000\006\062\ufff8\063\235\001\002\000\004" +
    "\062\ufff9\001\002\000\004\100\010\001\002\000\010\014" +
    "\247\015\uffeb\017\uffeb\001\002\000\010\014\ufff2\015\ufff2" +
    "\017\ufff2\001\002\000\010\014\uffec\015\uffec\017\uffec\001" +
    "\002\000\010\014\uffe3\015\366\017\uffe3\001\002\000\004" +
    "\100\010\001\002\000\004\044\257\001\002\000\004\062" +
    "\252\001\002\000\012\014\uffed\015\uffed\017\uffed\100\010" +
    "\001\002\000\010\014\uffef\015\uffef\017\uffef\001\002\000" +
    "\004\062\255\001\002\000\012\014\uffed\015\uffed\017\uffed" +
    "\100\010\001\002\000\010\014\uffee\015\uffee\017\uffee\001" +
    "\002\000\022\021\267\037\uff70\056\121\064\107\065\101" +
    "\071\272\077\uff13\100\010\001\002\000\012\020\uff28\062" +
    "\uff28\072\uff28\074\uff28\001\002\000\004\074\363\001\002" +
    "\000\004\074\uff74\001\002\000\012\020\uff42\022\uff42\062" +
    "\uff42\072\uff42\001\002\000\004\062\uffea\001\002\000\010" +
    "\020\uff77\062\uff77\072\uff77\001\002\000\010\020\uff79\062" +
    "\uff79\072\uff79\001\002\000\004\037\uff71\001\002\000\012" +
    "\064\107\065\101\077\uff13\100\010\001\002\000\010\020" +
    "\uff7c\062\uff7c\072\uff7c\001\002\000\004\100\010\001\002" +
    "\000\010\020\uff7a\062\uff7a\072\uff7a\001\002\000\010\020" +
    "\uff78\062\uff78\072\uff78\001\002\000\004\037\277\001\002" +
    "\000\010\020\uff7b\062\uff7b\072\uff7b\001\002\000\010\020" +
    "\uff66\033\310\100\010\001\002\000\010\020\uff6d\062\uff6d" +
    "\072\uff6d\001\002\000\010\020\uff72\062\uff72\072\uff72\001" +
    "\002\000\010\020\uff6f\062\uff6f\072\uff6f\001\002\000\010" +
    "\020\uff6e\062\uff6e\072\uff6e\001\002\000\010\020\uff60\062" +
    "\353\072\uff60\001\002\000\010\020\uff5d\062\347\072\uff5d" +
    "\001\002\000\010\020\uff62\062\345\072\uff62\001\002\000" +
    "\004\061\342\001\002\000\006\062\317\100\uff56\001\002" +
    "\000\004\020\313\001\002\000\010\020\uff64\062\uff64\072" +
    "\uff64\001\002\000\010\020\uff68\062\uff68\072\uff68\001\002" +
    "\000\004\100\uff57\001\002\000\004\100\010\001\002\000" +
    "\004\100\uff58\001\002\000\030\006\uff13\007\105\010\110" +
    "\035\uff13\056\uff13\064\107\065\101\071\uff13\075\uff13\077" +
    "\uff13\100\uff13\001\002\000\006\061\322\100\uff4e\001\002" +
    "\000\006\061\uff4d\100\uff4d\001\002\000\030\006\uff13\007" +
    "\105\010\110\035\uff13\056\uff13\064\107\065\101\071\uff13" +
    "\075\uff13\077\uff13\100\uff13\001\002\000\004\100\uff51\001" +
    "\002\000\004\100\uff4c\001\002\000\004\100\uff4f\001\002" +
    "\000\004\022\327\001\002\000\002\001\002\000\010\020" +
    "\uff59\062\337\072\uff59\001\002\000\004\061\332\001\002" +
    "\000\004\071\333\001\002\000\010\033\310\072\uff66\100" +
    "\010\001\002\000\004\072\335\001\002\000\010\020\uff55" +
    "\062\uff55\072\uff55\001\002\000\010\020\uff5b\062\uff5b\072" +
    "\uff5b\001\002\000\002\001\002\000\010\020\uff59\062\337" +
    "\072\uff59\001\002\000\010\020\uff5a\062\uff5a\072\uff5a\001" +
    "\002\000\022\021\267\037\uff70\056\121\064\107\065\101" +
    "\071\272\077\uff13\100\010\001\002\000\010\020\uff5c\062" +
    "\uff5c\072\uff5c\001\002\000\006\020\uff67\072\uff67\001\002" +
    "\000\006\020\uff63\072\uff63\001\002\000\010\020\uff5f\062" +
    "\uff5f\072\uff5f\001\002\000\004\100\010\001\002\000\010" +
    "\020\uff5d\062\347\072\uff5d\001\002\000\010\020\uff5e\062" +
    "\uff5e\072\uff5e\001\002\000\010\020\uff65\062\uff65\072\uff65" +
    "\001\002\000\004\033\310\001\002\000\010\020\uff61\062" +
    "\uff61\072\uff61\001\002\000\004\072\356\001\002\000\010" +
    "\020\uff76\062\uff76\072\uff76\001\002\000\012\020\uff26\062" +
    "\uff26\072\uff26\074\uff26\001\002\000\012\020\uff29\062\uff29" +
    "\072\uff29\074\uff29\001\002\000\012\020\uff44\062\uff44\072" +
    "\uff44\074\uff44\001\002\000\012\020\uff27\062\uff27\072\uff27" +
    "\074\uff27\001\002\000\014\056\121\064\107\065\101\077" +
    "\uff13\100\uff13\001\002\000\010\020\uff73\062\uff73\072\uff73" +
    "\001\002\000\010\020\uff75\062\uff75\072\uff75\001\002\000" +
    "\004\100\010\001\002\000\006\014\uffe4\017\uffe4\001\002" +
    "\000\006\014\373\017\uffdf\001\002\000\006\014\ufffb\017" +
    "\ufffb\001\002\000\006\014\uffe0\017\uffe0\001\002\000\004" +
    "\100\010\001\002\000\004\044\375\001\002\000\004\037" +
    "\376\001\002\000\010\020\uff66\033\310\100\010\001\002" +
    "\000\004\020\u0100\001\002\000\004\062\u0101\001\002\000" +
    "\006\014\uffe1\017\uffe1\001\002\000\004\062\u0106\001\002" +
    "\000\004\061\u0104\001\002\000\022\021\267\037\uff70\056" +
    "\121\064\107\065\101\071\272\077\uff13\100\010\001\002" +
    "\000\004\062\uffe2\001\002\000\016\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\017\uffe5\100\010\001\002\000\004\062\u010b" +
    "\001\002\000\014\012\uffe8\013\uffe8\014\uffe9\015\uffe8\017" +
    "\uffe9\001\002\000\014\012\024\013\ufff6\014\ufff6\015\ufff6" +
    "\017\ufff6\001\002\000\006\014\uffe7\017\uffe7\001\002\000" +
    "\016\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\100\010" +
    "\001\002\000\014\012\uffe6\013\uffe6\014\uffe6\015\uffe6\017" +
    "\uffe6\001\002\000\004\062\u0111\001\002\000\004\044\u010f" +
    "\001\002\000\014\056\121\064\107\065\101\077\uff13\100" +
    "\uff13\001\002\000\004\062\ufff0\001\002\000\012\014\ufff3" +
    "\015\ufff3\017\ufff3\100\010\001\002\000\004\062\u0114\001" +
    "\002\000\010\014\ufff5\015\ufff5\017\ufff5\001\002\000\012" +
    "\014\ufff3\015\ufff3\017\ufff3\100\010\001\002\000\010\014" +
    "\ufff4\015\ufff4\017\ufff4\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\012\004\025\007\024\011\026\213\022\001\001" +
    "\000\004\033\006\001\001\000\004\174\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\013\033\012" +
    "\001\001\000\004\224\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\017\001\001\000\002\001\001" +
    "\000\004\224\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\243\214\242\001\001\000\014\015\232" +
    "\153\231\156\233\163\101\164\121\001\001\000\004\010" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\005\047\024\045\033\033\040\041\053" +
    "\062\054\035\055\053\057\061\072\036\073\054\074\055" +
    "\075\064\076\032\102\063\143\040\144\052\145\037\146" +
    "\043\147\051\150\056\151\060\172\046\210\057\222\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\060\226\061\225\062\103\063\105\064\113" +
    "\100\102\163\101\164\110\220\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\024\045\033\033\040\041\057" +
    "\214\143\040\144\052\145\037\146\043\147\213\150\056" +
    "\151\060\172\046\001\001\000\002\001\001\000\062\005" +
    "\211\024\045\033\033\040\041\053\062\054\035\055\053" +
    "\057\061\072\036\073\054\074\055\075\064\076\032\102" +
    "\063\143\040\144\052\145\037\146\043\147\051\150\056" +
    "\151\060\172\046\210\057\222\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\251\071\001\001\000\002\001\001\000" +
    "\004\236\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\024\045\033\033\040\041\053" +
    "\067\054\035\055\053\057\061\072\036\073\054\074\055" +
    "\075\064\076\032\102\063\143\040\144\052\145\037\146" +
    "\043\147\051\150\056\151\060\172\046\210\057\222\050" +
    "\001\001\000\004\236\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\076\040\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\060\111\062\103\063\105\064\113\100\102" +
    "\163\101\164\110\220\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\217\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\024\045\033\116\036\134\037\125" +
    "\040\041\057\136\111\126\143\040\144\052\145\037\146" +
    "\043\147\051\150\056\151\060\152\115\153\132\154\133" +
    "\156\135\161\114\162\124\163\101\164\121\165\131\166" +
    "\130\172\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\250\200\001\001\000\002\001\001" +
    "\000\004\157\177\001\001\000\002\001\001\000\024\030" +
    "\170\060\171\062\103\063\105\064\113\100\102\163\101" +
    "\164\110\220\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\060\166\062\103\063\105" +
    "\064\113\100\102\163\101\164\110\220\112\001\001\000" +
    "\006\110\160\242\156\001\001\000\006\107\150\243\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\173\140\001\001\000\002\001\001\000\010" +
    "\156\147\163\101\164\121\001\001\000\002\001\001\000" +
    "\006\157\144\160\143\001\001\000\002\001\001\000\006" +
    "\173\146\175\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\024\045" +
    "\033\116\036\134\037\125\040\041\057\136\111\126\143" +
    "\040\144\052\145\037\146\043\147\051\150\056\151\060" +
    "\152\115\153\132\154\133\156\135\161\114\162\124\163" +
    "\101\164\121\165\154\166\130\172\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\107" +
    "\150\243\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\024\045\033\116\036\134\037" +
    "\125\040\041\057\136\111\126\143\040\144\052\145\037" +
    "\146\043\147\051\150\056\151\060\152\115\153\132\154" +
    "\133\156\135\161\114\162\124\163\101\164\121\166\164" +
    "\172\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\110\160\242\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\225\173\001\001\000\022\060\174\062\103" +
    "\063\105\064\113\100\102\163\101\164\110\220\112\001" +
    "\001\000\002\001\001\000\004\225\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\024" +
    "\045\033\116\036\134\037\125\040\041\057\136\111\126" +
    "\143\040\144\052\145\037\146\043\147\051\150\056\151" +
    "\060\152\115\153\132\154\133\156\135\161\114\162\124" +
    "\163\101\164\121\166\201\172\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\230\216\001\001\000\002\001\001\000\032\024" +
    "\045\033\033\040\041\057\214\143\040\144\052\145\037" +
    "\146\043\147\221\150\056\151\060\172\046\001\001\000" +
    "\002\001\001\000\060\024\045\033\033\040\041\053\220" +
    "\054\035\055\053\057\061\072\036\073\054\074\055\075" +
    "\064\076\032\102\063\143\040\144\052\145\037\146\043" +
    "\147\051\150\056\151\060\172\046\210\057\222\050\001" +
    "\001\000\002\001\001\000\004\230\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\024\045\033\033\040\041" +
    "\053\230\054\035\055\053\057\061\072\036\073\054\074" +
    "\055\075\064\076\032\102\063\143\040\144\052\145\037" +
    "\146\043\147\051\150\056\151\060\172\046\210\057\222" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\232\235\001\001\000\002\001\001\000\014\015\237\153" +
    "\231\156\233\163\101\164\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\232\240\001\001\000\002\001" +
    "\001\000\006\020\u010c\033\u010d\001\001\000\006\013\244" +
    "\215\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\366\216\367\001\001\000\006\022\250\033\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\253\033\247\245\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\253\033\247\245\255\001\001\000" +
    "\002\001\001\000\040\021\261\032\263\033\262\035\265" +
    "\112\270\113\275\114\272\115\273\116\264\140\260\161" +
    "\257\162\124\163\101\164\267\201\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\033\360\036\361\152\356\153" +
    "\132\154\133\156\135\163\101\164\121\221\357\001\001" +
    "\000\002\001\001\000\006\006\354\033\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\117\300\120\301" +
    "\121\302\122\277\001\001\000\002\001\001\000\020\006" +
    "\306\033\012\127\303\130\311\131\310\132\305\142\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\203\351\001\001\000\004" +
    "\233\345\001\001\000\004\202\343\001\001\000\002\001" +
    "\001\000\010\133\314\177\313\200\315\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\262\035\325\001\001\000\002\001\001" +
    "\000\024\060\320\062\103\063\105\064\113\100\102\134" +
    "\317\163\101\164\110\220\112\001\001\000\004\176\322" +
    "\001\001\000\002\001\001\000\024\060\323\062\103\063" +
    "\105\064\113\100\102\163\101\164\110\171\324\220\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\105\330\135\327\001\001" +
    "\000\004\234\335\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\306\033\012\127\303\130\311\131\333" +
    "\132\305\142\304\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\105\330\135\337\001\001" +
    "\000\004\234\340\001\001\000\002\001\001\000\040\021" +
    "\261\032\342\033\262\035\265\112\270\113\275\114\272" +
    "\115\273\116\264\140\260\161\257\162\124\163\101\164" +
    "\267\201\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\306\033" +
    "\012\142\347\001\001\000\004\233\350\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\130\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\021\363\141\364\161\257\162\124\163\101" +
    "\164\267\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\u0102\023\u0101\033\012\001\001\000\002\001\001" +
    "\000\006\016\371\017\370\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\373\033\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\306\033\012\127" +
    "\303\130\311\131\376\132\305\142\304\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\021\261\032\u0104\033\262" +
    "\035\265\112\270\113\275\114\272\115\273\116\264\140" +
    "\260\161\257\162\124\163\101\164\267\201\274\001\001" +
    "\000\002\001\001\000\012\006\u0102\023\u0106\033\012\244" +
    "\u0107\001\001\000\002\001\001\000\004\247\u0108\001\001" +
    "\000\010\007\u0109\011\026\213\022\001\001\000\002\001" +
    "\001\000\012\006\u0102\023\u0106\033\012\244\u010b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\021\u010f\161\257\162\124\163\101\164\267\001\001" +
    "\000\002\001\001\000\010\020\u0111\033\u010d\246\u0112\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\u0111" +
    "\033\u010d\246\u0114\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_heading block DOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_heading ::= PROGRAM identifier args_opt SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_heading",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // args_opt ::= LPARENT identifier_list RPARENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args_opt",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // args_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args_opt",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= declr_part stmt_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declr_part ::= label_declr_part_opt const_def_part_opt type_def_part_opt var_declr_part_opt record_declr_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declr_part",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // label_declr_part ::= LABEL label comma_label SEMI 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lid = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  if (le != null) { SemanticManager.getInstance().lineError = ((int) le); } 
                                                             if (lid != null) { SemanticManager.getInstance().addLabel(Integer.parseInt(lid.toString())); }  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declr_part",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comma_label ::= COMMA label comma_label 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lid2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lid2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lid2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  if (c != null) { SemanticManager.getInstance().lineError = ((int) c); } 
		                                           if (lid2 != null) { SemanticManager.getInstance().addLabel(Integer.parseInt(lid2.toString())); }  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_label",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comma_label ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_label",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // label_declr_part_opt ::= label_declr_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declr_part_opt",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // label_declr_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declr_part_opt",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // const_def_part ::= CONST const_def SEMI const_def_semi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_def_part",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // const_def_semi ::= const_def SEMI const_def_semi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_def_semi",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // const_def_semi ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_def_semi",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // const_def_part_opt ::= const_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_def_part_opt",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // const_def_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_def_part_opt",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // const_def ::= identifier EQ constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_def",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_def_part ::= TYPE type_def SEMI type_def_semi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_part",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_def_semi ::= type_def SEMI type_def_semi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_semi",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_def_semi ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_semi",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_def_part_opt ::= type_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_part_opt",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_def_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_part_opt",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type_def ::= identifier EQ type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // var_declr_part ::= VAR var_declr SEMI var_declr_semi 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 if (va != null){ SemanticManager.getInstance().lineError = ((int) va); } 
                                                               if (var != null) { System.out.println("VARIABLE DECLARATION PART: " + var); RESULT = var; } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declr_part",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$0 ::= 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
 if (va != null) { SemanticManager.getInstance().lineError = ((int) va); } 
                                                               if (var != null) { System.out.println("VARIABLE DECLARATION PART: " + var); RESULT = var;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",165, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // var_declr_part ::= VAR var_declr SEMI var_declr_semi NT$0 declr_part 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declr_part",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_declr_semi ::= var_declr SEMI var_declr_semi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declr_semi",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_declr_semi ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declr_semi",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_declr_part_opt ::= var_declr_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declr_part_opt",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_declr_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declr_part_opt",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_declr ::= identifier_list COLON type 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (il != null) { System.out.println("VARIABLE DECLARATION : " + il); RESULT = il; }
	                                               if (tp != null) { SemanticManager.getInstance().addIdentifier(il.toString());
	   	                                                             SemanticManager.getInstance().addVariable(il.toString(), tp.toString(), "null"); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_declr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // record_declr ::= TYPE identifier_list EQ RECORD field_list END SEMI 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_declr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // record_declr_opt ::= record_declr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_declr_opt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // record_declr_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_declr_opt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // directive ::= FORWARD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("directive",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // directive ::= compiler_def_direct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("directive",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt_part ::= BEGIN stmt_seq END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_part",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // compiler_def_direct ::= EXTERNAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compiler_def_direct",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // result_type ::= type_identifier 
            {
              Object RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (rt != null) { System.out.println("result type : " + rt); RESULT = rt; } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("result_type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // formal_param_list ::= LPARENT formal_param_section RPARENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_param_list",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // semi_formal_param_section ::= SEMI formal_param_section semi_formal_param_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_formal_param_section",158, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // semi_formal_param_section ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_formal_param_section",158, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // formal_param_list_opt ::= formal_param_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_param_list_opt",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // formal_param_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_param_list_opt",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // formal_param_section ::= val_param_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_param_section",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // formal_param_section ::= var_param_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_param_section",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // val_param_section ::= identifier_list COLON param_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("val_param_section",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // var_param_section ::= VAR identifier_list COLON param_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_param_section",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // param_type ::= type_identifier 
            {
              Object RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (ti != null) { System.out.println("type identifier: " + ti); RESULT = ti; } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_type",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // semi_bound_spec ::= SEMI bound_spec semi_bound_spec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_bound_spec",157, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // semi_bound_spec ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_bound_spec",157, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bound_spec ::= bound_identifier_prod 
            {
              Object RESULT =null;
		int bipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bip = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (bip != null) { RESULT = bip;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound_spec",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bound_spec ::= bound_digit_seq_prod 
            {
              Object RESULT =null;
		int bdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (bds != null) { RESULT = bds;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound_spec",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bound_identifier_prod ::= identifier DOUBLEDOT identifier ordinal_type_identifier_opt 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (id != null && id1 !=null) { System.out.println("identifier:id: " + id);
															                                                                   System.out.println("identifier:id: " + id1);
															                                                                   SemanticManager.getInstance().addIdentifier(id.toString());
															                                                                   SemanticManager.getInstance().addIdentifier(id1.toString()); }  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound_identifier_prod",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bound_digit_seq_prod ::= NUM DOUBLEDOT NUM ordinal_type_identifier_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound_digit_seq_prod",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ordinal_type_identifier_opt ::= COLON ordinal_type_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type_identifier_opt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ordinal_type_identifier_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type_identifier_opt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ordinal_type_identifier ::= type_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type_identifier",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmt_seq ::= stmt semi_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // semi_stmt ::= SEMI stmt semi_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_stmt",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // semi_stmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_stmt",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stmt ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmt ::= structured_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // label_colon ::= label COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_colon",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // label_colon ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_colon",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // simple_stmt ::= simple_stmt_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // simple_stmt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // simple_stmt_opt ::= assign_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt_opt",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assign_stmt ::= var_funct_ident ASSIGN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // var_funct_ident ::= var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_funct_ident",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // structured_stmt ::= compound_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_stmt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // structured_stmt ::= repetitive_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_stmt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // structured_stmt ::= conditional_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_stmt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // structured_stmt ::= with_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_stmt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // compound_stmt ::= BEGIN stmt_seq END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // repetitive_stmt ::= while_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repetitive_stmt",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // while_stmt ::= WHILE expr_while DO stmt 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object expw = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println("WHILE: " + expw + "teste"+w);
												  if (w != null) { SemanticManager.getInstance().lineError = ((int) w); } 
                                                  if (expw != null) { SemanticManager.getInstance().checkWhileExpression(expw.toString()); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stmt",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // initial_expr ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial_expr",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // final_expr ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("final_expr",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comma_const ::= COMMA constant comma_const 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_const",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comma_const ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_const",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // with_stmt ::= WITH record_var comma_record_var DO stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("with_stmt",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comma_record_var ::= COMMA record_var comma_record_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_record_var",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comma_record_var ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_record_var",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // actual_param_list ::= LPARENT actual_param comma_actual_param RPARENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_param_list",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comma_actual_param ::= COMMA actual_param comma_actual_param 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_actual_param",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comma_actual_param ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_actual_param",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // actual_param ::= actual_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_param",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // actual_param ::= actual_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_param",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // actual_value ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_value",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr_while ::= TRUE 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "boolean"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_while",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr_while ::= FALSE 
            {
              Object RESULT =null;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "boolean"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_while",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr_while ::= expr 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp;       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_while",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // boolean_expr ::= bool boolean_op bool 
            {
              Object RESULT =null;
		int bol1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bol1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object bol1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bol2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bol2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bol2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "boolean"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // boolean_op ::= AND 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("and", "boolean", "and" , (int) and); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_op",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // boolean_op ::= OR 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("or", "boolean", "or" , (int) or); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_op",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= boolean_expr 
            {
              Object RESULT =null;
		int bexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("bexp= "+ bexp); 
 	                          if (bexp != null) { RESULT = bexp; } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= true 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "boolean"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= false 
            {
              Object RESULT =null;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "boolean"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= simple_expr 
            {
              Object RESULT =null;
		int sexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("simple expression= " + sexp); RESULT = "integer"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // relop_simple_expr ::= relop simple_expr 
            {
              Object RESULT =null;
		int relopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int relopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object relop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("RELOP: " + ((Objeto) relop).getId()); 
													  if (relop != null) { SemanticManager.getInstance().lineError = ((Objeto) relop).getLineError(); } 
                                                      if (sexp != null) { SemanticManager.getInstance().checkBooleanExpression(sexp.toString()); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop_simple_expr",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // relop_simple_expr ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop_simple_expr",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // simple_expr ::= sign_opt term plus_op_term 
            {
              Object RESULT =null;
		int terleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int terright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ter = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expr",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // plus_op_term ::= plus_minus_op term plus_op_term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plus_op_term",161, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // plus_op_term ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plus_op_term",161, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // term ::= factor times_op_factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // times_op_factor ::= times_div_op factor times_op_factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("times_op_factor",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // times_op_factor ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("times_op_factor",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // factor ::= var 
            {
              Object RESULT =null;
		int varileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vari = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (vari != null) { RESULT = vari;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // factor ::= number 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("numero "+n); if (n != null) { RESULT = n;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // factor ::= string 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (str != null) { RESULT = "string"; } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // factor ::= set 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // factor ::= NIL 
            {
              Object RESULT =null;
		 RESULT = "nil"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // factor ::= const_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // factor ::= bound_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // factor ::= LPARENT expr RPARENT 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (exp != null) { RESULT = exp; } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$1 ::= 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 RESULT = new Objeto("not", "boolean", "not" , (int) not); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",166, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // factor ::= NOT NT$1 factor 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int notleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // var ::= entire_var 
            {
              Object RESULT =null;
		int evleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ev = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (ev != null) { System.out.println("entire var: " + ev); RESULT = ev; } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // var ::= component_variable 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (cv != null) { System.out.println("component var: " + cv); RESULT = cv;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // var ::= ref_var 
            {
              Object RESULT =null;
		int rvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (rv != null) { System.out.println("referenced var: " + rv); RESULT = rv;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // entire_var ::= var_identifier 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (vi != null) {RESULT = vi;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entire_var",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // entire_var ::= field_identifier 
            {
              Object RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (fi != null) {RESULT = fi;}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entire_var",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // component_variable ::= field_designator 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (fd != null) {RESULT = fd;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component_variable",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // component_variable ::= file_buffer 
            {
              Object RESULT =null;
		int fbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (fb != null) {RESULT = fb;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component_variable",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // field_designator ::= record_var DOT field_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_designator",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // set ::= LBRACKET element_list RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // element_list ::= expr comma_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // element_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // actual_param_list_opt ::= actual_param_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_param_list_opt",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // actual_param_list_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_param_list_opt",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // file_buffer ::= file_var CIRCUNFLEX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_buffer",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // type ::= simple_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // type ::= structured_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // type ::= pointer_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // type ::= type_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // simple_type ::= subrange_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // simple_type ::= enumerated_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // enumerated_type ::= LPARENT identifier_list RPARENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumerated_type",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // subrange_type ::= lower_bound DOUBLEDOT upper_bound 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subrange_type",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // lower_bound ::= constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lower_bound",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // upper_bound ::= constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("upper_bound",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // structured_type ::= packed_opt unpacked_structured_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_type",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // packed_opt ::= PACKED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("packed_opt",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // packed_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("packed_opt",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // unpacked_structured_type ::= record_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // unpacked_structured_type ::= set_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // unpacked_structured_type ::= file_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // colon_index_type ::= COLON index_type colon_index_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colon_index_type",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // colon_index_type ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colon_index_type",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // index_type ::= simple_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // element_type ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_type",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // record_type ::= RECORD field_list END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // field_list ::= field_list_aux semi_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // field_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // field_list_aux ::= fixed_part semi_variant_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list_aux",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // field_list_aux ::= variant_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list_aux",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // semi_opt ::= SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_opt",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // semi_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_opt",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // semi_variant_part ::= SEMI variant_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_variant_part",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // semi_variant_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_variant_part",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // fixed_part ::= record_section semi_record_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fixed_part",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // semi_record_section ::= SEMI record_section semi_record_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_record_section",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // semi_record_section ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_record_section",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // record_section ::= identifier_list COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_section",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // variant_part ::= CASE tag_field type_identifier OF variant semi_variant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variant_part",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // semi_variant ::= SEMI variant semi_variant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_variant",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // semi_variant ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_variant",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // tag_field ::= identifier_colon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tag_field",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // identifier_colon ::= semi_field_width 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_colon",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // identifier_colon ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_colon",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // variant ::= case_label_list COLON LPARENT field_list RPARENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variant",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // comma_output_value ::= COMMA output_value comma_output_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_output_value",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // comma_output_value ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_output_value",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // output_value ::= expr semi_field_width 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output_value",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // semi_field_width ::= SEMI field_width colon_fraction_length 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_field_width",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // semi_field_width ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_field_width",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // colon_fraction_length ::= COLON fraction_length 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colon_fraction_length",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // colon_fraction_length ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colon_fraction_length",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // field_width ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_width",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // fraction_length ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fraction_length",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // file_var ::= var 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("file var: " + var); 
                        if (var != null) {RESULT = new Objeto(var.toString(), var.toString(), var ,  -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_var",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // NT$2 ::= 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 System.out.println("referenced var: " + var); 
                                    if (var != null) {RESULT = new Objeto(var.toString(), var.toString(), var , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",167, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ref_var ::= pointer_variable NT$2 CIRCUNFLEX 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref_var",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // record_var ::= var 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("record var: " + var); 
                          if (var != null) {RESULT = new Objeto(var.toString(), var.toString(), var , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_var",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // pointer_variable ::= var 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("pointer var: " + var); 
                                if (var != null) {RESULT = new Objeto(var.toString(), var.toString(), var , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer_variable",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // actual_variable ::= var 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("actual var: " + var); 
                               if (var != null) {RESULT = new Objeto(var.toString(), var.toString(), var , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_variable",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // field_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("field var: " + id); 
                                      if (id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_identifier",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // const_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("constant var: " + id); 
                                      if (id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_identifier",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // var_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("var identifier: " + id); 
                                    if (id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_identifier",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // type_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("type var: " + id); 
                                     if (id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , 0);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_identifier",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // bound_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("bound var: " + id); 
                                      if (id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound_identifier",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // identifier_list ::= identifier comma_identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (id != null) { System.out.println("identifier: " + id);
													   SemanticManager.getInstance().addIdentifier(id.toString()); }  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // expr_list ::= expr comma_expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // comma_var ::= COMMA var comma_var 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (var != null) { System.out.println("var: " + var);
															SemanticManager.getInstance().addIdentifier(var.toString());
															SemanticManager.getInstance().addVariable(var.toString(), ((Objeto) var).getTipo(), ((Objeto) var).getValor().toString());} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_var",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // comma_var ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_var",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // comma_identifier ::= COMMA identifier comma_identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (id != null) { System.out.println("identifier: " + id);
																               SemanticManager.getInstance().addIdentifier(id.toString());} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_identifier",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // comma_identifier ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_identifier",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // comma_expr ::= COMMA expr comma_expr 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if (ex != null) { System.out.println("expr: " + ex);
														    SemanticManager.getInstance().lineError = (int) ex;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_expr",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // comma_expr ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_expr",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // number ::= integer_number 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (in!= null) { RESULT = "integer";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // number ::= real_number 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (rn!= null) { RESULT = "real";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // bool ::= FALSE 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (in!= null) { RESULT = "boolean";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // bool ::= TRUE 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (rn!= null) { RESULT = "boolean";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // integer_number ::= digit_sequence 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (ds!= null) { RESULT = ds;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_number",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // real_number ::= digit_sequence DOT unsigned_digit_sequence_optional scale_factor_optional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("real_number",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // real_number ::= digit_sequence scale_factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("real_number",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // scale_factor ::= SCALEFACTOR digit_sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scale_factor",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // scale_factor_optional ::= scale_factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scale_factor_optional",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // scale_factor_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scale_factor_optional",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // unsigned_digit_sequence ::= NUM 
            {
              Object RESULT =null;
		int digitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int digitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer digit = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (digit!= null) { RESULT = digit; } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned_digit_sequence",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // unsigned_digit_sequence_optional ::= unsigned_digit_sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned_digit_sequence_optional",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // unsigned_digit_sequence_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned_digit_sequence_optional",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // digit_sequence ::= sign_opt unsigned_digit_sequence 
            {
              Object RESULT =null;
		int soleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int soright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object so = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int undigitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int undigitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object undigit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (undigit != null) { if(so != null) { RESULT = so.toString() + undigit.toString(); } 
                                                                                          else { RESULT = undigit.toString(); } } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("digit_sequence",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // label ::= integer_number 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (in != null) { RESULT = in;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // constant ::= sign_opt constant_identifier_or_number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // constant ::= string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // constant_identifier_or_number ::= const_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_identifier_or_number",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // constant_identifier_or_number ::= number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_identifier_or_number",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // relop ::= EQ 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("equals", "boolean", "=" , (int) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // relop ::= NE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("diff", "boolean", "<>" , (int) d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // relop ::= LT 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("lessthen", "boolean", "<" , (int) lt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // relop ::= LE 
            {
              Object RESULT =null;
		int lteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lte = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("lessthenequals", "boolean", "<=" , (int) lte); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // relop ::= GT 
            {
              Object RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("greaterthen", "boolean", ">" , (int) gt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // relop ::= GE 
            {
              Object RESULT =null;
		int gteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object gte = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("greaterthenequals", "boolean", ">=" , (int) gte); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // relop ::= IN 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("in", "boolean", "in" , (int) in); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relop",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // plus_minus_op ::= PLUS 
            {
              Object RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("plus", "arithmetic", "+" , (int) plus); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plus_minus_op",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // plus_minus_op ::= MINUS 
            {
              Object RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("minus", "arithmetic", "-" , (int) minus); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("plus_minus_op",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // times_div_op ::= TIMES 
            {
              Object RESULT =null;
		int timesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int timesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object times = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("times", "arithmetic", "*" , (int) times); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("times_div_op",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // times_div_op ::= DIV 
            {
              Object RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("div", "arithmetic", "/" , (int) div); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("times_div_op",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // times_div_op ::= DIVEXTENSION 
            {
              Object RESULT =null;
		int divextleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int divextright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object divext = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("divext", "arithmetic", "div" , (int) divext); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("times_div_op",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // times_div_op ::= MOD 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("mod", "arithmetic", "mod" , (int) mod); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("times_div_op",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // string ::= string_character 
            {
              Object RESULT =null;
		int strchleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strchright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object strch = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (strch != null) { RESULT = strch.toString(); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // letter ::= LETTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("letter",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // sign ::= PLUS 
            {
              Object RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("plus", "arithmetic", "+" , (int) plus); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // sign ::= MINUS 
            {
              Object RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("minus", "arithmetic", "-" , (int) minus); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // sign_opt ::= sign 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (s != null) { RESULT = s; }  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign_opt",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // sign_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign_opt",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // true ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("true",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // false ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("false",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // string_character ::= STRINGCHARACTER 
            {
              Object RESULT =null;
		int strterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object strter = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (strter != null) { RESULT = strter.toString();} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_character",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // identifier ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("IDENTIFIER: "+id); if (id != null) { RESULT = id.toString(); } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
