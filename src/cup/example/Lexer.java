/* The following code was generated by JFlex 1.3.5 on 06/12/18 00:37 */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java_cup.runtime.Scanner;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 06/12/18 00:37 from the specification file
 * <tt>file:/home/johanny/eclipse-workspace/Compilador-Pascal/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\7\1\10\1\0\1\11\1\7\22\0\1\7\1\0\1\65"+
    "\4\0\1\6\1\63\1\64\1\14\1\44\1\60\1\45\1\55\1\15"+
    "\12\1\1\56\1\57\1\51\1\52\1\50\2\0\1\2\1\2\1\2"+
    "\1\3\1\4\1\2\1\2\1\2\1\2\1\2\1\2\1\5\1\2"+
    "\1\2\1\2\1\2\1\2\1\2\1\2\1\2\1\2\1\2\1\2"+
    "\1\2\1\2\1\2\1\61\1\0\1\62\1\47\2\0\1\26\1\31"+
    "\1\33\1\37\1\24\1\25\1\35\1\34\1\17\1\36\1\43\1\20"+
    "\1\40\1\16\1\32\1\42\1\2\1\22\1\27\1\21\1\23\1\46"+
    "\1\41\1\54\1\30\1\2\1\12\1\53\1\13\uff82\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    54,   108,   162,   162,   216,   270,   324,    54,   378, 
       54,   432,   486,   540,   594,   648,   702,   756,   810,   864, 
      918,   972,  1026,  1080,  1134,  1188,  1242,  1296,  1350,  1404, 
       54,    54,  1458,    54,  1512,  1566,    54,    54,  1620,  1674, 
     1728,    54,    54,    54,    54,    54,    54,    54,  1782,  1836, 
     1890,  1944,   378,   378,  1998,  2052,  2106,  2160,  2214,   162, 
     2268,  2322,  2376,  2430,   162,  2484,  2538,  2592,  2646,  2700, 
     2754,  2808,  2862,  2916,  2970,  3024,  3078,  3132,  3186,  3240, 
     3294,  3348,  3402,   162,   162,  3456,  3510,  3564,  3618,  3672, 
     3726,  3780,  3834,  3888,  3942,  3996,  4050,  4104,  4158,    54, 
       54,    54,  4212,    54,    54,  4266,  4320,  4374,  4428,   162, 
      162,  4482,  4536,  4590,  4644,  4698,  4752,  4806,  4860,  4914, 
     4968,  5022,  5076,   162,  5130,  5184,  5238,  5292,   162,  5346, 
      162,  5400,   162,  5454,   162,   162,   162,  5508,  5562,  5616, 
     5670,  5724,  5778,  5832,   162,  5886,  5940,   162,  5994,  6048, 
     6102,  6156,   162,   162,  6210,  6264,  4428,  6318,  6372,  6426, 
     6480,   162,   162,   162,  6534,  6588,   162,  6642,   162,   162, 
      162,  6696,  6750,  6804,  6858,  6912,  6966,  7020,  7074,   162, 
     7128,   162,   162,  7182,  7236,   162,  7290,  7344,  7398,  7452, 
     7506,  7560,  7614,  7668,  7722,  7776,   162,  7830,  7884,   162, 
     7938,   162,  7992,   162,  8046,   162,  8100,  8154,  8208,  8262, 
     8316,   162,  8370,  8424,  8478,  8532,   162,   162,  8586,  8640, 
     8694,   162,   162,  8748,   162,   162,  8802,   162,  8856,  8910, 
      162,  8964,  9018,   162,  9072,   162,  9126,  9180,   162,  9234, 
     9288,  9342,   162,  9396,  9450,   162,  9504,  9558,  9612,   162, 
     9666,  9720,  9774,   162,  9828,  9882,   162,  9936,   162,  9990, 
    10044,   162
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\2\1\3\2\4\1\5\1\6\1\7\2\10\1\11"+
    "\1\12\1\2\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\4\1\27"+
    "\1\30\1\31\1\4\1\32\1\4\1\33\1\34\1\35"+
    "\1\36\1\4\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\67\0\1\3\66\0\1\4"+
    "\1\61\2\4\10\0\26\4\2\0\1\4\5\0\1\4"+
    "\13\0\1\4\1\61\2\4\10\0\6\4\1\62\17\4"+
    "\2\0\1\4\5\0\1\4\11\0\6\63\1\64\57\63"+
    "\7\0\2\10\55\0\13\65\1\66\1\67\51\65\15\0"+
    "\1\70\52\0\1\4\1\61\2\4\10\0\1\4\1\71"+
    "\12\4\1\72\11\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\1\73\6\4\1\74\12\4"+
    "\1\75\3\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\10\4\1\76\15\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\4\4"+
    "\1\77\5\4\1\100\1\4\1\101\1\4\1\102\7\4"+
    "\2\0\1\4\5\0\1\4\13\0\1\4\1\61\2\4"+
    "\10\0\6\4\1\103\17\4\2\0\1\4\5\0\1\4"+
    "\13\0\1\4\1\61\2\4\10\0\1\104\10\4\1\105"+
    "\14\4\2\0\1\4\5\0\1\4\13\0\1\4\1\61"+
    "\2\4\10\0\1\106\1\4\1\107\23\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\1\4"+
    "\1\110\3\4\1\111\2\4\1\112\3\4\1\113\11\4"+
    "\2\0\1\4\5\0\1\4\13\0\1\4\1\61\2\4"+
    "\10\0\1\114\3\4\1\115\4\4\1\116\14\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\3\4\1\117\2\4\1\120\7\4\1\121\7\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\6\4\1\122\5\4\1\123\11\4\2\0\1\4\5\0"+
    "\1\4\13\0\1\4\1\61\2\4\10\0\4\4\1\124"+
    "\2\4\1\125\3\4\1\126\12\4\2\0\1\4\5\0"+
    "\1\4\13\0\1\4\1\61\2\4\10\0\10\4\1\127"+
    "\3\4\1\130\1\4\1\131\7\4\2\0\1\4\5\0"+
    "\1\4\13\0\1\4\1\61\2\4\10\0\14\4\1\132"+
    "\11\4\2\0\1\4\5\0\1\4\13\0\1\4\1\61"+
    "\2\4\10\0\1\4\1\133\4\4\1\134\5\4\1\135"+
    "\11\4\2\0\1\4\5\0\1\4\13\0\1\4\1\61"+
    "\2\4\10\0\14\4\1\136\11\4\2\0\1\4\5\0"+
    "\1\4\13\0\1\4\1\61\2\4\10\0\1\4\1\137"+
    "\14\4\1\140\7\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\4\4\1\141\3\4\1\142"+
    "\15\4\2\0\1\4\5\0\1\4\13\0\1\4\1\61"+
    "\2\4\10\0\10\4\1\143\15\4\2\0\1\4\5\0"+
    "\1\4\63\0\1\144\63\0\1\145\1\0\1\146\15\0"+
    "\1\4\1\61\2\4\10\0\14\4\1\147\11\4\2\0"+
    "\1\4\5\0\1\4\66\0\1\150\62\0\1\151\15\0"+
    "\1\4\1\61\2\4\10\0\1\4\1\152\24\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\3\4\1\153\22\4\2\0\1\4\5\0\1\4\11\0"+
    "\6\154\1\155\57\154\6\0\1\63\57\0\14\65\1\67"+
    "\1\0\50\65\10\70\1\11\55\70\2\0\1\4\1\61"+
    "\2\4\10\0\2\4\1\156\23\4\2\0\1\4\5\0"+
    "\1\4\13\0\1\4\1\61\2\4\10\0\3\4\1\157"+
    "\22\4\2\0\1\4\5\0\1\4\13\0\1\4\1\61"+
    "\2\4\10\0\2\4\1\160\1\161\22\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\24\4"+
    "\1\162\1\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\13\4\1\163\12\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\5\4"+
    "\1\164\20\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\24\4\1\165\1\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\6\4"+
    "\1\166\17\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\15\4\1\167\6\4\1\170\1\4"+
    "\2\0\1\4\5\0\1\4\13\0\1\4\1\61\2\4"+
    "\10\0\1\4\1\171\1\4\1\172\22\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\6\4"+
    "\1\173\17\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\21\4\1\174\4\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\11\4"+
    "\1\175\14\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\2\4\1\176\23\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\1\177"+
    "\25\4\2\0\1\4\5\0\1\4\13\0\1\4\1\61"+
    "\2\4\10\0\2\4\1\200\23\4\2\0\1\4\5\0"+
    "\1\4\13\0\1\4\1\61\2\4\10\0\4\4\1\201"+
    "\16\4\1\202\2\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\21\4\1\203\4\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\4\4\1\204\21\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\22\4\1\205\3\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\4\4\1\206\21\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\3\4\1\207\22\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\2\4\1\210\1\4\1\211\21\4\2\0\1\4\5\0"+
    "\1\4\13\0\1\4\1\61\2\4\10\0\17\4\1\212"+
    "\6\4\2\0\1\4\5\0\1\4\13\0\1\4\1\61"+
    "\2\4\10\0\14\4\1\213\11\4\2\0\1\4\5\0"+
    "\1\4\13\0\1\4\1\61\2\4\10\0\20\4\1\214"+
    "\5\4\2\0\1\4\5\0\1\4\13\0\1\4\1\61"+
    "\2\4\10\0\11\4\1\215\14\4\2\0\1\4\5\0"+
    "\1\4\13\0\1\4\1\61\2\4\10\0\1\216\25\4"+
    "\2\0\1\4\5\0\1\4\13\0\1\4\1\61\2\4"+
    "\10\0\10\4\1\217\15\4\2\0\1\4\5\0\1\4"+
    "\13\0\1\4\1\61\2\4\10\0\3\4\1\220\22\4"+
    "\2\0\1\4\5\0\1\4\13\0\1\4\1\61\2\4"+
    "\10\0\26\4\2\0\1\221\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\11\4\1\222\14\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\23\4"+
    "\1\223\2\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\21\4\1\224\4\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\3\4"+
    "\1\225\22\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\1\4\1\226\24\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\14\4"+
    "\1\227\11\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\15\4\1\230\10\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\4\4"+
    "\1\231\21\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\4\4\1\232\21\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\17\4"+
    "\1\233\6\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\3\4\1\234\22\4\2\0\1\4"+
    "\5\0\1\4\11\0\6\154\1\235\57\154\6\0\1\154"+
    "\61\0\1\4\1\61\2\4\10\0\1\4\1\236\24\4"+
    "\2\0\1\4\5\0\1\4\13\0\1\4\1\61\2\4"+
    "\10\0\6\4\1\237\17\4\2\0\1\4\5\0\1\4"+
    "\13\0\1\4\1\61\2\4\10\0\2\4\1\240\23\4"+
    "\2\0\1\4\5\0\1\4\13\0\1\4\1\61\2\4"+
    "\10\0\6\4\1\241\17\4\2\0\1\4\5\0\1\4"+
    "\13\0\1\4\1\61\2\4\10\0\6\4\1\242\17\4"+
    "\2\0\1\4\5\0\1\4\13\0\1\4\1\61\2\4"+
    "\10\0\6\4\1\243\17\4\2\0\1\4\5\0\1\4"+
    "\13\0\1\4\1\61\2\4\10\0\1\244\25\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\14\4\1\245\11\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\6\4\1\246\17\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\3\4\1\247\22\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\1\4\1\250\24\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\11\4\1\251\14\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\6\4\1\252\17\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\6\4\1\253\17\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\15\4\1\254\10\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\11\4\1\255\14\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\10\4\1\256\15\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\10\4\1\257\15\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\1\4\1\260\24\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\1\4\1\261\24\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\2\4\1\262\23\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\6\4\1\263\17\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\6\4\1\264\17\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\11\4\1\265\14\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\4\4\1\266\21\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\14\4\1\267\11\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\3\4\1\270\22\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\1\271\25\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\16\4\1\272\7\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\2\4"+
    "\1\273\23\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\15\4\1\274\1\4\1\275\6\4"+
    "\2\0\1\4\5\0\1\4\13\0\1\4\1\61\2\4"+
    "\10\0\25\4\1\276\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\1\4\1\277\24\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\6\4\1\300\17\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\1\301\25\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\4\4"+
    "\1\302\12\4\1\303\6\4\2\0\1\4\5\0\1\4"+
    "\13\0\1\4\1\61\2\4\10\0\6\4\1\304\17\4"+
    "\2\0\1\4\5\0\1\4\13\0\1\4\1\61\2\4"+
    "\10\0\2\4\1\305\23\4\2\0\1\4\5\0\1\4"+
    "\13\0\1\4\1\61\2\4\10\0\4\4\1\306\21\4"+
    "\2\0\1\4\5\0\1\4\13\0\1\4\1\61\2\4"+
    "\10\0\10\4\1\307\15\4\2\0\1\4\5\0\1\4"+
    "\13\0\1\4\1\61\2\4\10\0\2\4\1\310\23\4"+
    "\2\0\1\4\5\0\1\4\13\0\1\4\1\61\2\4"+
    "\10\0\3\4\1\311\22\4\2\0\1\4\5\0\1\4"+
    "\13\0\1\4\1\61\2\4\10\0\6\4\1\312\17\4"+
    "\2\0\1\4\5\0\1\4\13\0\1\4\1\61\2\4"+
    "\10\0\4\4\1\313\21\4\2\0\1\4\5\0\1\4"+
    "\13\0\1\4\1\61\2\4\10\0\12\4\1\314\13\4"+
    "\2\0\1\4\5\0\1\4\13\0\1\4\1\61\2\4"+
    "\10\0\1\315\25\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\1\316\25\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\6\4"+
    "\1\317\17\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\15\4\1\320\10\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\3\4"+
    "\1\321\22\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\4\4\1\322\21\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\3\4"+
    "\1\323\22\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\6\4\1\324\17\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\6\4"+
    "\1\325\17\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\4\4\1\326\21\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\6\4"+
    "\1\327\17\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\3\4\1\330\22\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\4\4"+
    "\1\331\21\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\6\4\1\332\17\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\7\4"+
    "\1\333\16\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\6\4\1\334\17\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\22\4"+
    "\1\335\3\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\21\4\1\336\4\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\3\4"+
    "\1\337\22\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\1\4\1\340\24\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\21\4"+
    "\1\341\4\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\17\4\1\342\6\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\10\4"+
    "\1\343\15\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\3\4\1\344\22\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\4\4"+
    "\1\345\21\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\5\4\1\346\20\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\14\4"+
    "\1\347\11\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\21\4\1\350\4\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\10\4"+
    "\1\351\15\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\21\4\1\352\4\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\5\0\1\4"+
    "\2\0\26\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\10\4\1\353\15\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\4\4"+
    "\1\354\21\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\6\4\1\355\17\4\2\0\1\4"+
    "\5\0\1\4\13\0\1\4\1\61\2\4\10\0\14\4"+
    "\1\356\11\4\2\0\1\4\5\0\1\4\13\0\1\4"+
    "\1\61\2\4\10\0\1\357\25\4\2\0\1\4\5\0"+
    "\1\4\13\0\1\4\1\61\2\4\10\0\5\4\1\360"+
    "\20\4\2\0\1\4\5\0\1\4\13\0\1\4\1\61"+
    "\2\4\10\0\15\4\1\361\10\4\2\0\1\4\5\0"+
    "\1\4\13\0\1\4\1\61\2\4\10\0\5\4\1\362"+
    "\20\4\2\0\1\4\5\0\1\4\13\0\1\4\1\61"+
    "\2\4\10\0\22\4\1\363\3\4\2\0\1\4\5\0"+
    "\1\4\13\0\1\4\1\61\2\4\10\0\15\4\1\364"+
    "\10\4\2\0\1\4\5\0\1\4\13\0\1\4\1\61"+
    "\2\4\10\0\1\365\25\4\2\0\1\4\5\0\1\4"+
    "\13\0\1\4\1\61\2\4\10\0\1\366\25\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\15\4\1\367\10\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\3\4\1\370\22\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\4\4\1\371\21\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\6\4\1\372\17\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\3\4\1\373\22\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\3\4\1\374\22\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\14\4\1\375\11\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\6\4\1\376\17\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\10\4\1\377\15\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\14\4\1\u0100\11\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\4\4\1\u0101\21\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\3\4\1\u0102\22\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\4\4\1\u0103\21\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\1\4\1\u0104\24\4\2\0"+
    "\1\4\5\0\1\4\13\0\1\4\1\61\2\4\10\0"+
    "\14\4\1\u0105\11\4\2\0\1\4\5\0\1\4\13\0"+
    "\1\4\1\61\2\4\10\0\1\u0106\25\4\2\0\1\4"+
    "\5\0\1\4\11\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  9,  1,  1,  1,  1,  1,  1,  9,  1,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9, 
     1,  9,  1,  1,  9,  9,  1,  1,  1,  9,  9,  9,  9,  9,  9,  9, 
     1,  1,  0,  1,  0,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  9,  9,  1,  9,  9,  1,  1,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("Scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("Scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[10098];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 3: 
        case 5: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 32: 
        case 38: 
        case 48: 
        case 49: 
        case 56: 
        case 57: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 102: 
        case 105: 
        case 106: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 129: 
        case 131: 
        case 133: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 145: 
        case 146: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 154: 
        case 155: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 164: 
        case 165: 
        case 167: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 180: 
        case 183: 
        case 184: 
        case 186: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 197: 
        case 198: 
        case 200: 
        case 202: 
        case 204: 
        case 206: 
        case 207: 
        case 209: 
        case 210: 
        case 212: 
        case 213: 
        case 214: 
        case 215: 
        case 218: 
        case 219: 
        case 220: 
        case 223: 
        case 226: 
        case 228: 
        case 229: 
        case 231: 
        case 232: 
        case 234: 
        case 236: 
        case 237: 
        case 239: 
        case 240: 
        case 241: 
        case 243: 
        case 244: 
        case 246: 
        case 247: 
        case 248: 
        case 250: 
        case 251: 
        case 252: 
        case 254: 
        case 255: 
        case 257: 
        case 259: 
        case 260: 
          { return symbolFactory.newSymbol("IDENTIFIER", IDENTIFIER, new String(yytext()));  }
        case 263: break;
        case 242: 
          {  return symbolFactory.newSymbol("PROGRAM", PROGRAM);  }
        case 264: break;
        case 238: 
          {  return symbolFactory.newSymbol("BOOLEAN", BOOLEAN);  }
        case 265: break;
        case 235: 
          {  return symbolFactory.newSymbol("INTEGER", INTEGER);  }
        case 266: break;
        case 42: 
          {  return symbolFactory.newSymbol("COMMA", COMMA);  }
        case 267: break;
        case 40: 
          {  return symbolFactory.newSymbol("COLON", COLON);  }
        case 268: break;
        case 10: 
          {  return symbolFactory.newSymbol("TIMES", TIMES);  }
        case 269: break;
        case 31: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 270: break;
        case 196: 
          {  return symbolFactory.newSymbol("LABEL", LABEL);  }
        case 271: break;
        case 199: 
          {  return symbolFactory.newSymbol("UNTIL", UNTIL);  }
        case 272: break;
        case 201: 
          {  return symbolFactory.newSymbol("FALSE", FALSE);  }
        case 273: break;
        case 203: 
          {  return symbolFactory.newSymbol("ARRAY", ARRAY);  }
        case 274: break;
        case 205: 
          {  return symbolFactory.newSymbol("BEGIN", BEGIN);  }
        case 275: break;
        case 208: 
          {  return symbolFactory.newSymbol("CONST", CONST);  }
        case 276: break;
        case 211: 
          {  return symbolFactory.newSymbol("WHILE", WHILE);  }
        case 277: break;
        case 1: 
        case 9: 
          {  emit_warning("Unrecognized character '" +yytext()+"' -- ignored");  }
        case 278: break;
        case 256: 
          {  return symbolFactory.newSymbol("DESTRUCTOR", DESTRUCTOR);  }
        case 279: break;
        case 53: 
          {  System.out.println("Comment: " + yytext());  }
        case 280: break;
        case 108: 
          {  return symbolFactory.newSymbol("CHAR_CONST", CHAR_CONST);  }
        case 281: break;
        case 101: 
          {  return symbolFactory.newSymbol("LEQ", LEQ);  }
        case 282: break;
        case 100: 
          {  return symbolFactory.newSymbol("NEQ", NEQ);  }
        case 283: break;
        case 99: 
          {  return symbolFactory.newSymbol("GEQ", GEQ);  }
        case 284: break;
        case 11: 
          {  return symbolFactory.newSymbol("DIV", DIV);  }
        case 285: break;
        case 33: 
          {  return symbolFactory.newSymbol("PTR", PTR);  }
        case 286: break;
        case 34: 
          {  return symbolFactory.newSymbol("GTH", GTH);  }
        case 287: break;
        case 35: 
          {  return symbolFactory.newSymbol("LTH", LTH);  }
        case 288: break;
        case 36: 
          {  return symbolFactory.newSymbol("EQU", EQU);  }
        case 289: break;
        case 39: 
          {  return symbolFactory.newSymbol("DOT", DOT);  }
        case 290: break;
        case 109: 
          {  return symbolFactory.newSymbol("NIL", NIL);  }
        case 291: break;
        case 110: 
          {  return symbolFactory.newSymbol("NOT", NOT);  }
        case 292: break;
        case 123: 
          {  return symbolFactory.newSymbol("END", END);  }
        case 293: break;
        case 128: 
          {  return symbolFactory.newSymbol("FOR", FOR);  }
        case 294: break;
        case 130: 
          {  return symbolFactory.newSymbol("AND", AND);  }
        case 295: break;
        case 132: 
          {  return symbolFactory.newSymbol("ASM", ASM);  }
        case 296: break;
        case 134: 
          {  return symbolFactory.newSymbol("SET", SET);  }
        case 297: break;
        case 135: 
          {  return symbolFactory.newSymbol("SHL", SHL);  }
        case 298: break;
        case 136: 
          {  return symbolFactory.newSymbol("SHR", SHR);  }
        case 299: break;
        case 147: 
          {  return symbolFactory.newSymbol("MOD", MOD);  }
        case 300: break;
        case 152: 
          {  return symbolFactory.newSymbol("VAR", VAR);  }
        case 301: break;
        case 153: 
          {  return symbolFactory.newSymbol("XOR", XOR);  }
        case 302: break;
        case 245: 
          {  return symbolFactory.newSymbol("FUNCTION", FUNCTION);  }
        case 303: break;
        case 44: 
          {  return symbolFactory.newSymbol("RBRACKET", RBRACKET);  }
        case 304: break;
        case 43: 
          {  return symbolFactory.newSymbol("LBRACKET", LBRACKET);  }
        case 305: break;
        case 258: 
          {  return symbolFactory.newSymbol("CONSTRUCTOR", CONSTRUCTOR);  }
        case 306: break;
        case 51: 
        case 156: 
          {  return symbolFactory.newSymbol("STRING_CHAR", STRING_CHAR); }
        case 307: break;
        case 47: 
          {  return symbolFactory.newSymbol("DOUBLEQUOTE", DOUBLEQUOTE);  }
        case 308: break;
        case 6: 
          {  return symbolFactory.newSymbol("SINGLEQUOTE", SINGLEQUOTE);  }
        case 309: break;
        case 4: 
        case 18: 
          {  return symbolFactory.newSymbol("SCALEFACTOR", SCALEFACTOR);  }
        case 310: break;
        case 30: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 311: break;
        case 103: 
          {  return symbolFactory.newSymbol("DOTS", DOTS);  }
        case 312: break;
        case 161: 
          {  return symbolFactory.newSymbol("TRUE", TRUE);  }
        case 313: break;
        case 162: 
          {  return symbolFactory.newSymbol("TYPE", TYPE);  }
        case 314: break;
        case 163: 
          {  return symbolFactory.newSymbol("THEN", THEN);  }
        case 315: break;
        case 166: 
          {  return symbolFactory.newSymbol("UNIT", UNIT);  }
        case 316: break;
        case 168: 
          {  return symbolFactory.newSymbol("USES", USES);  }
        case 317: break;
        case 169: 
          {  return symbolFactory.newSymbol("ELSE", ELSE);  }
        case 318: break;
        case 170: 
          {  return symbolFactory.newSymbol("FILE", FILE);  }
        case 319: break;
        case 179: 
          {  return symbolFactory.newSymbol("CASE", CASE);  }
        case 320: break;
        case 181: 
          {  return symbolFactory.newSymbol("CHAR", CHAR);  }
        case 321: break;
        case 182: 
          {  return symbolFactory.newSymbol("GOTO", GOTO);  }
        case 322: break;
        case 185: 
          {  return symbolFactory.newSymbol("WITH", WITH);  }
        case 323: break;
        case 253: 
          {  return symbolFactory.newSymbol("PROCEDURE", PROCEDURE);  }
        case 324: break;
        case 249: 
          {  return symbolFactory.newSymbol("INTERFACE", INTERFACE);  }
        case 325: break;
        case 41: 
          {  return symbolFactory.newSymbol("SEMICOLON", SEMICOLON);  }
        case 326: break;
        case 233: 
          {  return symbolFactory.newSymbol("PACKED", PACKED);  }
        case 327: break;
        case 230: 
          {  return symbolFactory.newSymbol("DOWNTO", DOWNTO);  }
        case 328: break;
        case 227: 
          {  return symbolFactory.newSymbol("OBJECT", OBJECT);  }
        case 329: break;
        case 225: 
          {  return symbolFactory.newSymbol("STRING", STRING);  }
        case 330: break;
        case 224: 
          {  return symbolFactory.newSymbol("FOWARD", FOWARD);  }
        case 331: break;
        case 222: 
          {  return symbolFactory.newSymbol("REPEAT", REPEAT);  }
        case 332: break;
        case 221: 
          {  return symbolFactory.newSymbol("RECORD", RECORD);  }
        case 333: break;
        case 104: 
          {  return symbolFactory.newSymbol("ASSIGN", ASSIGN);  }
        case 334: break;
        case 144: 
          {  return symbolFactory.newSymbol("DIVINT", DIVINT);  }
        case 335: break;
        case 216: 
          {  return symbolFactory.newSymbol("LETTER", LETTER);  }
        case 336: break;
        case 217: 
          {  return symbolFactory.newSymbol("INLINE", INLINE);  }
        case 337: break;
        case 261: 
          {  return symbolFactory.newSymbol("IMPLEMENTATION", IMPLEMENTATION);  }
        case 338: break;
        case 92: 
          {  return symbolFactory.newSymbol("DO", DO);  }
        case 339: break;
        case 84: 
          {  return symbolFactory.newSymbol("OF", OF);  }
        case 340: break;
        case 64: 
          {  return symbolFactory.newSymbol("TO", TO);  }
        case 341: break;
        case 59: 
          {  return symbolFactory.newSymbol("IF", IF);  }
        case 342: break;
        case 58: 
          {  return symbolFactory.newSymbol("IN", IN);  }
        case 343: break;
        case 37: 
        case 83: 
          {  return symbolFactory.newSymbol("OR", OR);  }
        case 344: break;
        case 46: 
          {  return symbolFactory.newSymbol("RPARENTHESIS", RPARENTHESIS);  }
        case 345: break;
        case 45: 
          {  return symbolFactory.newSymbol("LPARENTHESIS", LPARENTHESIS);  }
        case 346: break;
        case 2: 
          {  return symbolFactory.newSymbol("DIGIT", DIGIT, Integer.parseInt(yytext()));  }
        case 347: break;
        case 8: 
          {                                }
        case 348: break;
        case 7: 
          {   }
        case 349: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {  return symbolFactory.newSymbol("EOF", EOF);  }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
